(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (let ((queue (cons front-ptr rear-ptr)))
      (define (set-front-ptr! item) (set! front-ptr item))
      (define (set-rear-ptr! item) (set! rear-ptr item))
      (define (empty-queue?) (null? front-ptr))
      (define (insert-queue! item)
	(let ((new-pair (cons item '())))
	  (cond ((empty-queue?)
		 (set-front-ptr! new-pair)
		 (set-rear-ptr! new-pair)
		 queue)
		(else
		 (set-cdr! rear-ptr new-pair)
		 (set-rear-ptr! new-pair)
		 queue))))
      (define (delete-queue!)
	(cond ((empty-queue?)
	       (error "DELETE! called with an empty queue" queue))
	      (else
	       (set-front-ptr! (cdr front-ptr))
	       queue)))
      (define (dispatch m)
	(cond ((eq? m 'empty-queue?) empty-queue?)
	      ((eq? m 'insert-queue!) insert-queue!)
	      ((eq? m 'delete-queue!) delete-queue!)
	      ((eq? m 'front-ptr) front-ptr)
	      ((eq? m 'rear-ptr) rear-ptr)
	      (else (lambda (a . x)
		      (error "Not a named operation -- DISPATCH" m)))))
      dispatch)))
