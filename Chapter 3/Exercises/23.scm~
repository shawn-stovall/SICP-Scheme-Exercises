(define (make-deque) (cons '() '()))
(define (front-ptr deque)
  (car deque))
(define (rear-ptr deque)
  (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))

(define (empty-deque? deque)
  (null? (front-ptr deque)))

(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called with an empty deque" deque)
      (car (front-ptr deque))))

(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called with an empty deque" deque)
      (car (rear-ptr deque))))

(define (front-insert-deque! deque item)
  (cond ((empty-deque? deque)
	 (let ((new-item (cons item (cons '() '()))))
	   (set-front-ptr! deque new-item)
	   (set-rear-ptr! deque new-item)))
	(else
	 (let ((new-item
		(cons item (cons '() (front-ptr deque)))))
	   (set-car! (cdr (front-ptr deque)) 'apple)
	   (set-front-ptr! deque new-item)))))

(define (rear-insert-deque! deque item)
  (cond ((empty-deque? deque)
	 (let ((new-item
		(cons item (cons '() '()))))
	   (set-front-ptr! deque new-item)
	   (set-rear-ptr! deque new-item)))
	(else
	 (let ((new-item
		(cons item (cons (rear-ptr deque) '()))))
	   (set-cdr! (cdr (rear-ptr deque)) new-item)
	   (set-rear-ptr! deque new-item)))))

(define (front-delete-deque! deque)
  (if (empty-deque? deque)
      (error "FRONT-DELETE-DEQUE! called on an empty deque")
      (begin (set-front-ptr! deque (cdr deque))
	     (display (front-deque deque))
	     (set-car! (cdr (front-ptr deque)) '()))))
