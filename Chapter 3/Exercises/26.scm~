(define (make-table gt? e?)
  (define (key assoc-element)
    (car assoc-element))
  (define (value assoc-element)
    (cdr assoc-element))
  (define (left-branch table)
    (cadr table))
  (define (right-branch table)
    (cddr table))
  (let ((local-table false))
    (define (lookup keys)
      (define (helper keys table)
	(if table
	    (if (e? (car keys) (key (car table)))
		(if (null? (cdr keys))
		    (value (car keys))
		    (if (pair? (value (car table)))
			(helper (cdr keys) (value (car table)))
			false))
		(if (gt? (car keys) (key (car table)))
		    (helper keys (right-branch table))
		    (helper keys (left-branch table))))
	    false))
      (helper keys local-table))
    (define (insert! keys value)
      (define (helper keys table)
	(if table
	    (if (e? (car keys) (key (car table)))
		(if (null? (cdr keys))
		    (set-cdr! (car table) value)
		    (if (pair? (value (car table)))
			(helper (cdr keys) (value (car table)))
			(begin (set-cdr! (car table)
					 (cons (cons (cadr keys) '())
					       (cons false false)))
			       (helper (cdr keys) (value (car table))))))
		(if (gt? (car keys) (key (car table)))
		    (helper keys (right-branch table))
		    (helper keys (left-branch table))))
	    (if (null? (cdr keys))
		(set! table
		      (cons (cons (car keys) value)
			    (cons false false)))
		(begin (set! table
			     (cons (cons (car keys) '())
				   (cons false false)))
		       (helper keys table)))))
      (helper keys local-table))
    (define (print-table)
      (display local-table))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
	    ((eq? m 'insert-proc!) insert!)
	    ((eq? m 'print-table-proc) print-table)
	    (else (error "Unknown procedure -- DISPATCH" m)))))
  'ok)

(define (lookup keys table)
  ((table 'lookup-proc) keys))
(define (insert! keys value table)
  ((table 'insert-proc!) keys value))
(define (print-table table)
  ((table 'print-table-proc) print-table))
